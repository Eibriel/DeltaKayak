extends Node3D

var time := 0.0

var anim:Array[Dictionary]
var anim_frame := 0

func _process(delta: float) -> void:
	time += delta
	if time < 0.1: return
	if anim_frame >= anim.size(): return
	time = 0.0
	%Agent.position.x = anim[anim_frame].x
	%Agent.position.z = anim[anim_frame].y
	%Agent.rotation.y = -anim[anim_frame].yaw + deg_to_rad(90)
	var tail:= CSGSphere3D.new()
	tail.radius = 0.1
	tail.position = %Agent.position
	add_child(tail)
	anim_frame += 1

func _ready() -> void:
	print("test HeapDictTest")
	var heapdict_test := HeapDictTest.new()
	heapdict_test.test_main()
	
	print("start!")
	var x = 51
	var y = 31
	var sx = 10.0
	var sy = 7.0
	var syaw0 = deg_to_rad(120.0)
	var gx = 45.0
	var gy = 20.0
	var gyaw0 = deg_to_rad(90.0)

	var obs_res = design_obstacles(x, y)
	var ox = obs_res[0]
	var oy = obs_res[1]

	for n in ox.size():
		var obs := CSGBox3D.new()
		#obs.size = Vector3(0.1, 0.1, 0.1)
		obs.position.x = ox[n]
		obs.position.z = oy[n]
		add_child(obs)

	var hybrid_astar := HybridAStar.new()

	var t0 = Time.get_ticks_msec()
	var path = hybrid_astar.hybrid_astar_planning(sx, sy, syaw0, gx, gy, gyaw0,
								 ox, oy, hybrid_astar.config.XY_RESO, hybrid_astar.config.YAW_RESO)
	var t1 = Time.get_ticks_msec()
	print("running T: ", t1 - t0)

	if not path:
		print("Searching failed!")
		get_tree().quit()
		return

	const expected_path_x = [10.0, 9.8, 9.600000000000001, 9.400000000000002, 9.200000000000003, 9.000000000000004, 8.800000000000004, 8.600000000000005, 8.400000000000006, 8.200000000000006, 8.000000000000007, 7.800000000000007, 7.600000000000007, 7.400000000000007, 7.200000000000006, 7.000000000000006, 6.800000000000006, 6.600000000000006, 6.400000000000006, 6.2000000000000055, 6.000000000000005, 5.800000000000005, 5.6241818277327384, 5.473370293738478, 5.348272895662259, 5.249476499191304, 5.177444584909557, 5.1325150739850605, 5.114898742890473, 5.1246782345937, 5.161807670857405, 5.226112867466214, 5.319140046985983, 5.44039024109063, 5.589213102143025, 5.764810391453729, 5.966240260780494, 6.192422304103922, 6.442143352583149, 6.714063981609255, 7.006725695054627, 7.318558748184231, 7.647890567269183, 7.992954720742464, 8.351900393778362, 8.722802315476976, 9.10367108540753, 9.49246384412217, 9.887095230407, 10.28544856649913, 10.68538721127577, 11.084766020520467, 11.483240364833511, 11.880411633613319, 12.275882519779422, 12.669257417215407, 13.06014281651031, 13.448147698602586, 13.832883925932874, 14.213966630714289, 14.591014599931801, 14.963650656685617, 15.34219497449026, 15.72594716411044, 16.11419720061648, 16.50622673708471, 16.901310433695336, 17.298717299768725, 17.697712046256974, 18.09755644618841, 18.49751070054788, 18.896834807065677, 19.29678913238025, 19.69522844816971, 20.090015652143403, 20.47903323078171, 20.86019461700787, 21.2314553818729, 21.59082420022494, 21.936373531546636, 22.26624995867197, 22.57868412892889, 22.872000244386637, 23.144625050305052, 23.39509627357471, 23.62207046588672, 23.82433020956394, 24.00079064740381, 24.15050530150876, 24.272671149893874, 24.366632933642485, 24.43188667150745, 24.497140409372413, 24.562394147237377, 24.62764788510234, 24.692901622967305, 24.75815536083227, 24.823409098697233, 24.888662836562197, 24.95391657442716, 25.019170312292125, 25.08442405015709, 25.169725344819337, 25.27485205499043, 25.3995304101146, 25.543435723320947, 25.706193236971664, 25.88737909860438, 26.08652146472704, 26.303101729590814, 26.536555875741126, 26.78627594282962, 27.05819565049844, 27.350856507561844, 27.66268877387816, 27.99201987993872, 28.337083398000942, 28.696028516647257, 29.066929967951335, 29.447798354005446, 29.83659081742073, 30.231221998567182, 30.62200723460266, 31.007928844187376, 31.38798181181799, 31.761176405084935, 32.126540752129564, 32.483123372588956, 32.82999565543724, 33.166254277270674, 33.49102355473887, 33.18866702219638, 32.90767673001436, 32.649769557903404, 32.41652134532609, 32.20935726295503, 32.02954310473289, 31.87817755374062, 31.756185469130344, 31.664312235140418, 31.603119206720724, 31.572980279595942, 31.57407960572406, 31.60641046810888, 31.669775321841556, 31.763787001120395, 31.87927670348792, 31.99562744600698, 32.111978188526045, 32.228328931045105, 32.344679673564166, 32.461030416083226, 32.577381158602286, 32.693731901121346, 32.810082643640406, 32.926433386159474, 33.042784128678534, 33.159134871197594, 33.275485613716654, 33.391836356235714, 33.508187098754775, 33.624537841273835, 33.740888583792895, 33.857239326311955, 33.973590068831015, 34.089940811350075, 34.20629155386914, 34.3226422963882, 34.43899303890726, 34.55534378142632, 34.67169452394538, 34.78804526646445, 34.90439600898351, 35.021834581117325, 35.160963786842096, 35.328951623881785, 35.52477166919951, 35.74722744209079, 35.99495971480432, 36.266454817563876, 36.56005388724705, 36.87396300321026, 37.206264148329176, 37.55492692828151, 37.91782097746603, 38.29272897575645, 38.67736019655644, 39.06936450337578, 39.466346709407034, 39.8658812123644, 40.265526815164186, 40.66284164189122, 41.055398057912875, 41.44079750297746, 41.81668514666514, 42.18076427664501, 42.53081033182472, 42.86468449464851, 43.18034675949342, 43.47586839731436, 43.74944374037784, 43.99940121507831, 44.224213555425536, 44.42250713479764, 44.593070358941574, 44.734861068939196, 44.84701290890591, 44.928840619514595, 44.9798442250009, 44.9997120880668]

	x = path.x
	y = path.y
	var yaw = path.yaw
	var direction = path.direction
	
	for k in x.size():
		anim.append({"x": x[k],"y": y[k], "yaw": yaw[k], "direction":direction[k]})


func design_obstacles(x, y) -> Array:
	var ox := []
	var oy := []

	for i in range(x):
		ox.append(i)
		oy.append(0)
	for i in range(x):
		ox.append(i)
		oy.append(y - 1)
	for i in range(y):
		ox.append(0)
		oy.append(i)
	for i in range(y):
		ox.append(x - 1)
		oy.append(i)
	for i in range(10, 21):
		ox.append(i)
		oy.append(15)
	for i in range(15):
		ox.append(20)
		oy.append(i)
	for i in range(15, 30):
		ox.append(30)
		oy.append(i)
	for i in range(16):
		ox.append(40)
		oy.append(i)

	return [ox, oy]
